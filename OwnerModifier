pragma solidity 0.5.7;

contract FietsContract{

    struct Fiets {
        string merk;
        uint maat;
    }

    address owner;

    mapping(address => Fiets) eigenaarVanFiets;

    modifier alleenNieuweEigenaars(){
        require(eigenaarVanFiets[msg.sender].maat == 0);
        _;
    }

    modifier alleenEigenaar(){
        require(msg.sender == owner);
        _;
    }

    constructor() public{
        owner = msg.sender;
    }

    function addFiets(string memory _merk, uint _maat) public alleenNieuweEigenaars{
        Fiets memory huidigeFiets =  Fiets(_merk, _maat);
       eigenaarVanFiets[msg.sender] = huidigeFiets;
    }

    function getFiets() public view returns (string memory) {
        address eigenaar = msg.sender;
        return eigenaarVanFiets[eigenaar].merk;
    }

    function wisFiets(address _address) public alleenEigenaar {
        delete eigenaarVanFiets[_address];
    }

}
